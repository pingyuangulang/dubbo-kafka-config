server.port=8081
dubbo.application.name = dubbo-demo-provider
dubbo.scan.basePackages= com.five.monkey.provider.dubbo
## RegistryConfig Bean
dubbo.registry.id = my-registry
dubbo.protocol.port=20880
dubbo.registry.address = zookeeper://62.234.192.80:2181?client=curator


spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.url=jdbc:mysql://62.234.192.80:3306/jim_test
spring.datasource.username=root
spring.datasource.password=jim0310
# Hikari will use the above plus the following to setup connection pooling
spring.datasource.hikari.minimumIdle=5
spring.datasource.hikari.maximumPoolSize=60
spring.datasource.hikari.idleTimeout=30000
spring.datasource.hikari.poolName=SpringBootDubboHikariCP
spring.datasource.hikari.maxLifetime=2000000
spring.datasource.hikari.connectionTimeout=10000
mybatis.mapper-locations=classpath:/mapper/*/*.xml

spring.redis.database=0
spring.redis.host=62.234.192.80
spring.redis.port=6379
spring.redis.password=
spring.redis.lettuce.pool.max-active=8
spring.redis.lettuce.pool.max-idle=8
spring.redis.lettuce.pool.max-wait=500
spring.redis.lettuce.pool.min-idle=0
spring.redis.lettuce.shutdown-timeout=1000

spring.kafka.bootstrap-servers=62.234.192.80:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# acks=0 \u5982\u679C\u8BBE\u7F6E\u4E3A0\uFF0C\u5219 producer \u4E0D\u4F1A\u7B49\u5F85\u670D\u52A1\u5668\u7684\u53CD\u9988\u3002\u8BE5\u6D88\u606F\u4F1A\u88AB\u7ACB\u523B\u6DFB\u52A0\u5230 socket buffer \u4E2D\u5E76\u8BA4\u4E3A\u5DF2\u7ECF\u53D1\u9001\u5B8C\u6210\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u670D\u52A1\u5668\u662F\u5426\u6536\u5230\u8BF7\u6C42\u662F\u6CA1\u6CD5\u4FDD\u8BC1\u7684\uFF0C\u5E76\u4E14\u53C2\u6570retries\u4E5F\u4E0D\u4F1A\u751F\u6548\uFF08\u56E0\u4E3A\u5BA2\u6237\u7AEF\u65E0\u6CD5\u83B7\u5F97\u5931\u8D25\u4FE1\u606F\uFF09\u3002\u6BCF\u4E2A\u8BB0\u5F55\u8FD4\u56DE\u7684 offset \u603B\u662F\u88AB\u8BBE\u7F6E\u4E3A-1
# acks=1 \u5982\u679C\u8BBE\u7F6E\u4E3A1\uFF0Cleader\u8282\u70B9\u4F1A\u5C06\u8BB0\u5F55\u5199\u5165\u672C\u5730\u65E5\u5FD7\uFF0C\u5E76\u4E14\u5728\u6240\u6709 follower \u8282\u70B9\u53CD\u9988\u4E4B\u524D\u5C31\u5148\u786E\u8BA4\u6210\u529F\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u5982\u679C leader \u8282\u70B9\u5728\u63A5\u6536\u8BB0\u5F55\u4E4B\u540E\uFF0C\u5E76\u4E14\u5728 follower \u8282\u70B9\u590D\u5236\u6570\u636E\u5B8C\u6210\u4E4B\u524D\u4EA7\u751F\u9519\u8BEF\uFF0C\u5219\u8FD9\u6761\u8BB0\u5F55\u4F1A\u4E22\u5931
# acks=all \u5982\u679C\u8BBE\u7F6E\u4E3Aall\uFF0C\u8FD9\u5C31\u610F\u5473\u7740 leader \u8282\u70B9\u4F1A\u7B49\u5F85\u6240\u6709\u540C\u6B65\u4E2D\u7684\u526F\u672C\u786E\u8BA4\u4E4B\u540E\u518D\u786E\u8BA4\u8FD9\u6761\u8BB0\u5F55\u662F\u5426\u53D1\u9001\u5B8C\u6210\u3002\u53EA\u8981\u81F3\u5C11\u6709\u4E00\u4E2A\u540C\u6B65\u526F\u672C\u5B58\u5728\uFF0C\u8BB0\u5F55\u5C31\u4E0D\u4F1A\u4E22\u5931\u3002\u8FD9\u79CD\u65B9\u5F0F\u662F\u5BF9\u8BF7\u6C42\u4F20\u9012\u7684\u6700\u6709\u6548\u4FDD\u8BC1\u3002acks=-1\u4E0Eacks=all\u662F\u7B49\u6548\u7684
spring.kafka.producer.acks=1
# \u6D88\u606F\u53D1\u9001\u5931\u8D25\u540E\u7684\u91CD\u53D1\u6B21\u6570
spring.kafka.producer.retries=3
# Producer \u7528\u6765\u7F13\u51B2\u7B49\u5F85\u88AB\u53D1\u9001\u5230\u670D\u52A1\u5668\u7684\u8BB0\u5F55\u7684\u603B\u5B57\u8282\u6570\u3002\u5982\u679C\u8BB0\u5F55\u53D1\u9001\u7684\u901F\u5EA6\u6BD4\u53D1\u9001\u5230\u670D\u52A1\u5668\u7684\u901F\u5EA6\u5FEB\uFF0C Producer \u5C31\u4F1A\u963B\u585E\uFF0C\u5982\u679C\u963B\u585E\u7684\u65F6\u95F4\u8D85\u8FC7 max.block.ms \u914D\u7F6E\u7684\u65F6\u957F\uFF0C\u5219\u4F1A\u629B\u51FA\u4E00\u4E2A\u5F02\u5E38\u3002
# \u8FD9\u4E2A\u914D\u7F6E\u4E0E Producer \u7684\u53EF\u7528\u603B\u5185\u5B58\u6709\u4E00\u5B9A\u7684\u5BF9\u5E94\u5173\u7CFB\uFF0C\u4F46\u5E76\u4E0D\u662F\u5B8C\u5168\u7B49\u4EF7\u7684\u5173\u7CFB\uFF0C\u56E0\u4E3A Producer \u7684\u53EF\u7528\u5185\u5B58\u5E76\u4E0D\u662F\u5168\u90E8\u90FD\u7528\u6765\u7F13\u5B58\u3002\u5355\u4F4D:\u5B57\u8282\u3002
spring.kafka.producer.buffer-memory=20480

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# \u6D88\u8D39\u8005\u6240\u5728\u6D88\u8D39\u8005\u7EC4
spring.kafka.consumer.group-id=default-group
# \u5F53Kafka\u4E2D\u6CA1\u6709\u521D\u59CB\u504F\u79FB\u91CF\u6216\u670D\u52A1\u5668\u4E0A\u4E0D\u518D\u5B58\u5728\u5F53\u524D\u504F\u79FB\u91CF\u65F6\uFF08\u4F8B\u5982\u56E0\u4E3A\u8BE5\u6570\u636E\u5DF2\u88AB\u5220\u9664\uFF09\uFF0C\u8BE5\u600E\u4E48\u529E\uFF1A
# earliest:\u5C06\u504F\u79FB\u91CF\u81EA\u52A8\u91CD\u7F6E\u4E3A\u6700\u65E9\u7684\u504F\u79FB\u91CF
# latest:\u81EA\u52A8\u5C06\u504F\u79FB\u91CF\u91CD\u7F6E\u4E3A\u6700\u65B0\u504F\u79FB\u91CF
# none:\u5982\u679C\u672A\u627E\u5230\u6D88\u8D39\u8005\u7EC4\u7684\u5148\u524D\u504F\u79FB\u91CF\uFF0C\u5219\u5411\u6D88\u8D39\u8005\u629B\u51FA\u5F02\u5E38
# exception:\u5411\u6D88\u8D39\u8005\u629B\u51FA\u5F02\u5E38
spring.kafka.consumer.auto-offset-reset=latest
# \u5982\u679C\u4E3Atrue\uFF0C\u5219\u6D88\u8D39\u8005\u7684\u8865\u507F\u5C06\u5728\u540E\u53F0\u5B9A\u671F\u63D0\u4EA4
spring.kafka.consumer.enable-auto-commit=true

kafka.topic.author=author
kafka.topic.book=book
